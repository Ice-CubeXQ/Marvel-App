{"version":3,"file":"static/js/745.76018917.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState({});\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    // const timerId = setInterval(updateChar, 15000);\r\n\r\n    return () => {\r\n      // clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n    getCharacter(id).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button onClick={updateChar} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = char;\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset).then(onCharListLoaded);\r\n  };\r\n\r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n\r\n    setNewItemLoading((newItemLoading) => false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded((charEnded) => ended);\r\n  };\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\r\n    itemRefs.current[id].classList.add(\"char__item_selected\");\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n\r\n      if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <li\r\n          className=\"char__item\"\r\n          key={item.id}\r\n          tabIndex={0}\r\n          ref={(el) => (itemRefs.current[i] = el)}\r\n          onClick={() => {\r\n            props.onCharSelected(item.id);\r\n            focusOnItem(i);\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \" \" || e.key === \"Enter\") {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }\r\n          }}\r\n        >\r\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n          <div className=\"char__name\">{item.name}</div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return <ul className=\"char__grid\">{items}</ul>;\r\n  }\r\n\r\n  const items = renderItems(charList);\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spiner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spiner}\r\n      {items}\r\n      <button disabled={newItemLoading} style={{ display: charEnded ? \"none\" : \"block\" }} onClick={() => onRequest(offset)} className=\"button button__main button__long\">\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacter(charId).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"Comics with this character not found\"}\r\n        {comics.map((item, i) => {\r\n          if (i > 9) {\r\n            return;\r\n          }\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              {item.name}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Field, Form, ErrorMessage as FormikErrorMessage } from \"formik\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { ErrorMessage } from \"formik\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link className=\"button button__secondary\" to={`/characters/${char[0].id}`}>\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n  );\r\n  const errorMessage = error ? (\r\n    <div>\r\n      <ErrorMessage className=\"char__search-critical-error\" />\r\n    </div>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{ charName: \"\" }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={loading}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel informantion portal\" />\r\n\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","_jsxs","className","children","_jsx","src","alt","style","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","spiner","disabled","display","Skeleton","_Fragment","comics","charId","skeleton","CharSearchForm","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration"],"sourceRoot":""}