{"version":3,"file":"static/js/895.9eb51a02.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return <img style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\" }} src={img} alt=\"Error\" />;\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // const timerId = setInterval(updateChar, 15000);\n\n    return () => {\n      // clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n\n      if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className=\"char__item\"\n          key={item.id}\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spiner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spiner}\n      {items}\n      <button disabled={newItemLoading} style={{ display: charEnded ? \"none\" : \"block\" }} onClick={() => onRequest(offset)} className=\"button button__main button__long\">\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"Comics with this character not found\"}\n        {comics.map((item, i) => {\n          if (i > 9) {\n            return;\n          }\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, { method, body, headers });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=23306ca8a4adb99aba65d096c093d5a8\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","spiner","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}