{"version":3,"file":"static/js/349.4252ee4b.chunk.js","mappings":"sLAEA,MAIA,EAJqBA,KACZC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,S,mLCClI,MAaA,EAbkBC,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBb,EAAAA,EAAAA,KAAA,OAAKO,IAAKO,EAAUL,IAAI,cACxBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRb,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAcN,IAAI,qB,gDCHxC,MA4DA,EA5DmBO,KACjB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,WAAS,IAC9CG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,IAC9BK,EAAaC,IAAkBN,EAAAA,EAAAA,WAAS,IAEzC,QAAEO,EAAO,MAAEC,EAAK,aAAEC,IAAiBC,EAAAA,EAAAA,MAEzCC,EAAAA,EAAAA,YAAU,KACRC,EAAUT,GAAQ,EAAK,GACtB,IAEH,MAAMS,EAAYA,CAACT,EAAQU,KACfX,GAAVW,GACAJ,EAAaN,GAAQW,KAAKC,EAAmB,EAGzCA,EAAsBC,IAC1B,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACzBD,GAAQ,GAEVlB,EAAc,IAAID,KAAekB,IACjCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,EAAM,EAmBvB,MAAME,EAhBN,SAAqBC,GACnB,MAAMD,EAAQC,EAAIC,KAAI,CAACC,EAAMC,KAEzB1C,EAAAA,EAAAA,KAAA,MAAYY,UAAU,eAAcC,UAClCF,EAAAA,EAAAA,MAACgC,EAAAA,GAAI,CAACC,GAAI,WAAWH,EAAKI,KAAKhC,SAAA,EAC7Bb,EAAAA,EAAAA,KAAA,OAAKO,IAAKkC,EAAKK,UAAWrC,IAAKgC,EAAKM,MAAOnC,UAAU,sBACrDZ,EAAAA,EAAAA,KAAA,OAAKY,UAAU,oBAAmBC,SAAE4B,EAAKM,SACzC/C,EAAAA,EAAAA,KAAA,OAAKY,UAAU,qBAAoBC,SAAE4B,EAAKO,YAJrCN,KAUb,OAAO1C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,eAAcC,SAAEyB,GACvC,CAEcW,CAAYhC,GACpBiC,EAAevB,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1CoD,EAAUzB,IAAYN,GAAiBpB,EAAAA,EAAAA,KAACoD,EAAAA,EAAO,IAAM,KAE3D,OACEzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1BqC,EACAC,EACAb,GACDtC,EAAAA,EAAAA,KAAA,UAAQqD,QAASA,IAAMtB,EAAUT,GAASrB,MAAO,CAAEC,QAASsB,EAAc,OAAS,SAAW8B,SAAUlC,EAAgBR,UAAU,mCAAkCC,UAClKb,EAAAA,EAAAA,KAAA,OAAKY,UAAU,QAAOC,SAAC,kBAErB,ECrDV,EATmB0C,KAEf5C,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA3C,SAAA,EACEb,EAAAA,EAAAA,KAACU,EAAS,KACVV,EAAAA,EAAAA,KAACgB,EAAU,M,6CCLV,MCqDP,EArDyBa,KACvB,MAAM,QAAEH,EAAO,QAAE+B,EAAO,MAAE9B,EAAK,WAAE+B,GDDZC,MACrB,MAAOjC,EAASkC,IAAczC,EAAAA,EAAAA,WAAS,IAChCQ,EAAOkC,IAAY1C,EAAAA,EAAAA,UAAS,MAyBnC,MAAO,CAAEO,UAAS+B,SAvBFK,EAAAA,EAAAA,cAAYC,eAAOC,GAAwF,IAAnFC,EAAMC,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAAOE,EAAIF,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAOH,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAC/FN,GAAW,GAEX,IACE,MAAMU,QAAiBC,MAAMP,EAAK,CAAEC,SAAQG,OAAMC,YAElD,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,mBAAmBT,cAAgBM,EAASI,UAG9D,MAAMC,QAAaL,EAASM,OAG5B,OADAhB,GAAW,GACJe,CACT,CAAE,MAAOE,GAGP,MAFAjB,GAAW,GACXC,EAASgB,EAAEC,SACLD,CACR,CACF,GAAG,IAIwBlD,QAAO+B,YAFfI,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAEP,EC1BEF,GAE1CoB,EAAW,4CACXC,EAAU,0CAsBVC,EAAuBC,IACpB,CACLrC,GAAIqC,EAAKrC,GACTsC,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAc,GAAGF,EAAKE,YAAYC,MAAM,EAAG,UAAY,6CACzEvC,UAAWoC,EAAKpC,UAAUwC,KAAO,IAAMJ,EAAKpC,UAAUyC,UACtDC,SAAUN,EAAKO,KAAK,GAAGzB,IACvB0B,KAAMR,EAAKO,KAAK,GAAGzB,IACnB2B,OAAQT,EAAKS,OAAOrD,QAIlBsD,EAAoBD,IAAY,IAADE,EACnC,MAAO,CACLhD,GAAI8C,EAAO9C,GACXE,MAAO4C,EAAO5C,MACdqC,YAAaO,EAAOP,aAAe,0BACnCU,UAAWH,EAAOG,UAAY,GAAGH,EAAOG,eAAiB,2CACzDhD,UAAW6C,EAAO7C,UAAUwC,KAAO,IAAMK,EAAO7C,UAAUyC,UAC1DQ,UAA+B,QAArBF,EAAAF,EAAOK,YAAY,UAAE,IAAAH,OAAA,EAArBA,EAAuBE,WAAY,QAC7C/C,MAAO2C,EAAOM,OAAO,GAAGjD,MAAQ,GAAG2C,EAAOM,OAAO,GAAGjD,SAAW,gBAChE,EAGH,MAAO,CAAEtB,UAASC,QAAOuE,iBA3CAnC,iBAAiC,IAA1BzC,EAAM4C,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAFlB,IAIlB,aADkBT,EAAQ,GAAGsB,8BAAqCzD,KAAU0D,MACjEL,KAAKwB,QAAQ3D,IAAIyC,EAC9B,EAwC2CmB,aAvCtBrC,UACnB,MAAMsC,QAAY5C,EAAQ,GAAGsB,eAAsBlC,MAAOmC,KAC1D,OAAOC,EAAoBoB,EAAI1B,KAAKwB,QAAQ,GAAG,EAqCQzC,aAAY9B,aAlChDmC,iBAAuB,IAAhBzC,EAAM4C,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAEnC,aADkBT,EAAQ,GAAGsB,8CAAqDzD,KAAU0D,MACjFL,KAAKwB,QAAQ3D,IAAIoD,EAC9B,EA+BmFU,SA7BlEvC,UACf,MAAMsC,QAAY5C,EAAQ,GAAGsB,WAAkBlC,KAAMmC,KACrD,OAAOY,EAAiBS,EAAI1B,KAAKwB,QAAQ,GAAG,EA2B+C,C","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return <img style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\" }} src={img} alt=\"Error\" />;\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./comicsList.scss\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { loading, error, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <li key={i} className=\"comics__item\">\n          <Link to={`/comics/${item.id}`}>\n            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  const items = renderItems(comicsList);\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button onClick={() => onRequest(offset)} style={{ display: comicsEnded ? \"none\" : \"block\" }} disabled={newItemLoading} className=\"button button__main button__long\">\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, { method, body, headers });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=23306ca8a4adb99aba65d096c093d5a8\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","onClick","disabled","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}